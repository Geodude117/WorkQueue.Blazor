@using RestSharp
@using DomainData.Models

@inject QueueGroupService QueueGroupService

<MatNavMenu>
    <MatNavItem Href="\" AllowSelection="true"><MatIcon Icon="home"></MatIcon>&nbsp;Home Page</MatNavItem>
    <MatNavSubMenu>
        <MatNavSubMenuHeader>
            <MatNavItem Href="list" AllowSelection="false"><MatIcon Icon="toc"></MatIcon>&nbsp;List</MatNavItem>
        </MatNavSubMenuHeader>
        <MatNavSubMenuList>
            @if (queueGroups != null)
            {
                @foreach (var group in queueGroups)
                {
                    <MatNavItem Href="@($"QueueComponent/{group.QueueGroupID}/{group.Name}")"><MatIcon Icon="table_view"></MatIcon>&nbsp; @group.Name</MatNavItem>
                }
            }
        </MatNavSubMenuList>
    </MatNavSubMenu>

    <MatNavSubMenu>
        <MatNavSubMenuHeader>
            <MatNavItem Href="create" AllowSelection="false"><MatIcon Icon="create"></MatIcon>&nbsp;Create</MatNavItem>
        </MatNavSubMenuHeader>
        <MatNavSubMenuList>
            @if (domainGroup != null)
            {
                @foreach (var group in domainGroup)
                {
                    <MatNavItem Href="@($"QuestionSet/{group.Id}")"><MatIcon Icon="dynamic_form"></MatIcon>&nbsp;@group.GroupName</MatNavItem>
                }
            }
        </MatNavSubMenuList>
    </MatNavSubMenu>

</MatNavMenu>


@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private IEnumerable<DomainGroup> domainGroup;
    private IEnumerable<QueueGroup> queueGroups;

    protected async override void OnInitialized()
    {
        queueGroups = await QueueGroupService.GetAll();


        var client = new RestClient("http://localhost:52388/");
        var request = new RestRequest("api/DomainData/", Method.GET);
        var queryResult = client.Execute<List<DomainGroup>>(request).Data;

        domainGroup = (IEnumerable<DomainGroup>)queryResult;

        this.StateHasChanged();
    }

}
