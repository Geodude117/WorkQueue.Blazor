
<EditForm Model="CSUCallbackModel" OnValidSubmit="@Success">
    <DataAnnotationsValidator />
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" Label="Wescot Ref" @bind-Value="CSUCallbackModel.WescotRef" Type="Number" ReadOnly="true" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" Label="Contact Number" @bind-Value="CSUCallbackModel.ContactNumber" Type="Number" ReadOnly="true" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatDatePicker Class="d-block" @bind-Value="CSUCallbackModel.DateForCallback" ReadOnly="true"></MatDatePicker>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" Label="Contact Number" @bind-Value="CSUCallbackModel.TimeToAvoid" ReadOnly="true" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatSelect Class="d-block" Label="Select" @bind-Value="CSUCallbackModel.Relationship" ReadOnly="true">
                    <MatOptionString Value=""></MatOptionString>
                    <MatOptionString Value="Customer">Customer</MatOptionString>
                    <MatOptionString Value="Authorised Third Party">Authorised Third Party</MatOptionString>
                    <MatOptionString Value="Unauthorised Third Party">Unauthorised Third Party</MatOptionString>
                </MatSelect>
                <ValidationMessage For="@(() => CSUCallbackModel.Relationship)" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" Label="Name Of caller" @bind-Value="CSUCallbackModel.NameOfcaller" ReadOnly="true" />
                <ValidationMessage For="@(() => CSUCallbackModel.NameOfcaller)" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" Label="Reason For Transfer" @bind-Value="CSUCallbackModel.ReasonForTransfer" ReadOnly="true" />
                <ValidationMessage For="@(() => CSUCallbackModel.ReasonForTransfer)" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" @bind-Value="CSUCallbackModel.ReasonForCallback" Label="Reason For Callback" TextArea="true" FullWidth="true" ReadOnly="true"></MatTextField>
                <ValidationMessage For="@(() => CSUCallbackModel.ReasonForCallback)" />
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatSlideToggle @bind-Value="@HealthIssueBool"></MatSlideToggle>
                @if (HealthIssueBool == true)
                {
                    <MatTextField Class="d-block" @bind-Value="CSUCallbackModel.HealthIssue" Label="Health Issue" TextArea="true" FullWidth="true" ReadOnly="true"></MatTextField>
                    <ValidationMessage For="@(() => CSUCallbackModel.HealthIssue)" />
                }
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                <MatTextField Class="d-block" Label="Queue ItemId" @bind-Value="CSUCallbackModel.QueueItemID" ReadOnly="true" />
                <ValidationMessage For="@(() => CSUCallbackModel.QueueItemID)" />
            </div>
        </div>
    </div>
</EditForm>

@code {

    private bool HealthIssueBool = false;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public CSU_Callback CSUCallbackModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CSUCallbackModel == null)
        {
            CSUCallbackModel = new CSU_Callback();
            CSUCallbackModel.DateForCallback = DateTime.Now.AddDays(+3);
        }
    }

    private void Success()
    {
    }
}
