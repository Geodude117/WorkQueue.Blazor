@page "/"
@using RestSharp
@using DomainData.Models
@inject QueueGroupService QueueGroupService

@inject NavigationManager NavigationManager
<div class="container-fluid">
    <div class="p-2"></div>
    <div class="mat-elevation-z5" style="padding: 20px">
        <MatH6>Select Work Queue</MatH6>
        <br />
        <MatSelectValue Label="Select Queue" @bind-Value="@selectedGroupID" Items="@groupData" ValueSelector="@(i=>i.Id.ToString())">
            <ItemTemplate>
                <span>@context.Name</span>
            </ItemTemplate>
        </MatSelectValue>
        <div class="p-1"></div>
        <MatButton Style="color:#1976d2" OnClick="@ViewQueue">View Queues</MatButton>
    </div>
    <div class="p-2"></div>
    <div class="mat-elevation-z5" style="padding: 20px">
        <MatH6>Quick View</MatH6>
        <br />
        @if (queueGroups != null)
        {
            <MatAccordion Multi="true">
                @foreach (var group in queueGroups)
                {
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                        <MatExpansionPanel>
                            <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>
                                    @group.Name
                                </MatExpansionPanelHeader>
                            </MatExpansionPanelSummary>
                            <MatExpansionPanelDetails>
                                <WorkQueue.Blazor.Components.QueueComponent QueueGroupID="@group.QueueGroupID.ToString()" QueueGroupName="@group.Name"></WorkQueue.Blazor.Components.QueueComponent>
                            </MatExpansionPanelDetails>
                        </MatExpansionPanel>

                    </div>
                }
            </MatAccordion>
        }
    </div>
    <div class="p-2"></div>
    @if (domainGroups != null)
    {
        <div class="mat-elevation-z5" style="padding: 20px">
            <MatH6>List of Domain Groups</MatH6>
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    @foreach (var domainGroup in domainGroups)
                    {
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                            <MatCard class="demo-mat-card">
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin">
                                        <div class="p-1">Create @domainGroup.GroupName</div>
                                    </MatHeadline6>
                                </div>
                                <MatCardContent>
                                    <MatCardMedia Wide="true">
                                        <div style="position:center">
                                            <MatIcon Style="font-size:180px; padding-left:80px" Icon="call"></MatIcon>
                                        </div>
                                    </MatCardMedia>
                                </MatCardContent>
                                <MatCardActions>
                                    <MatCardActionButtons>
                                        <MatButton Style="color:#1976d2">Create</MatButton>
                                        <MatButton Style="color:#1976d2">View Queues</MatButton>
                                    </MatCardActionButtons>
                                    <MatCardActionIcons>
                                        <MatIconButton Icon="@MatIconNames.Dashboard"></MatIconButton>
                                    </MatCardActionIcons>
                                </MatCardActions>
                            </MatCard>
                        </div>
                    }
                </div>
            </div>


        </div>

    }
</div>


    @code
{

        private IEnumerable<QueueGroup> queueGroups;
        private IEnumerable<DomainGroup> domainGroups;

        string selectedGroupID;
        List<GroupData> groupData = new List<GroupData>();

        private class GroupData
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        protected async override void OnInitialized()
        {
            queueGroups = await QueueGroupService.GetAll();

            foreach (var item in queueGroups)
            {
                GroupData data = new GroupData();
                data.Id = item.QueueGroupID;
                data.Name = item.Name;

                groupData.Add(data);
            }
            var client = new RestClient("http://localhost:52388/");
            var request = new RestRequest("api/DomainData/", Method.GET);
            var queryResult = client.Execute<List<DomainGroup>>(request).Data;

            domainGroups = (IEnumerable<DomainGroup>)queryResult;
            this.StateHasChanged();

        }

        private void ViewQueue()
        {
            int parsedSelectedGroupId = int.Parse(selectedGroupID);

            string selectedGroupName = groupData.Single(s => s.Id == parsedSelectedGroupId).Name;

            NavigationManager.NavigateTo("QueueComponent/" + selectedGroupID + "/" + selectedGroupName);
        }

    }
